# Question Types and Structure Documentation

## Overview
This document outlines the question types supported by the Safe Harbor Field App questionnaire system and the exact structure required for each question type to work properly in the system.

## Question Types Enum
The system supports the following question types:

```dart
enum QuestionType {
  text,
  dropdown,
  date,
  multipleChoice,
  number,
  longText,
  yesNo
}
```

## Base Question Structure
All questions must follow this base structure in Firestore:

```json
{
  "id": "unique_question_id",
  "text": "Question text displayed to user",
  "type": "text|dropdown|date|multipleChoice|number|longText|yesNo",
  "isRequired": true|false,
  "section": "Section Name",
  "order": 1,
  "options": ["array", "of", "options"],
  "placeholder": "Placeholder text",
  "helpText": "Additional help text",
  "validation": {
    "type": "email|phone|zipCode|date",
    "pattern": "regex_pattern",
    "minLength": 5,
    "maxLength": 100,
    "min": 0,
    "max": 999,
    "errorMessage": "Custom error message"
  },
  "logic": {
    "showOnValue": "value_to_show_on",
    "hideOnValue": "value_to_hide_on",
    "dependsOnQuestionId": "parent_question_id",
    "showOnValues": ["array", "of", "values"],
    "hideOnValues": ["array", "of", "values"]
  },
  "metadata": {
    "custom": "metadata"
  },
  "isActive": true,
  "createdAt": "timestamp",
  "updatedAt": "timestamp"
}
```

## Question Type Specifications

### 1. Text (`text`)
Basic single-line text input.

**Required Fields:**
- `text`: Question text
- `type`: "text"
- `isRequired`: boolean
- `order`: number

**Optional Fields:**
- `placeholder`: Hint text
- `validation`: Object with validation rules

**Example:**
```json
{
  "text": "Inspector Name",
  "type": "text",
  "isRequired": true,
  "section": "Inspector Information",
  "order": 1,
  "placeholder": "Enter inspector's full name",
  "validation": {
    "minLength": 2,
    "maxLength": 50,
    "errorMessage": "Name must be between 2 and 50 characters"
  }
}
```

### 2. Long Text (`longText`)
Multi-line text input (displays as textarea with 3+ lines).

**Required Fields:**
- `text`: Question text
- `type`: "longText"
- `isRequired`: boolean
- `order`: number

**Example:**
```json
{
  "text": "Additional Notes",
  "type": "longText",
  "isRequired": false,
  "section": "General",
  "order": 100,
  "placeholder": "Enter any additional observations or notes",
  "validation": {
    "maxLength": 500,
    "errorMessage": "Notes cannot exceed 500 characters"
  }
}
```

### 3. Number (`number`)
Numeric input with numeric keyboard.

**Required Fields:**
- `text`: Question text
- `type`: "number"
- `isRequired`: boolean
- `order`: number

**Validation Options:**
- `min`: Minimum value
- `max`: Maximum value

**Example:**
```json
{
  "text": "Year Built",
  "type": "number",
  "isRequired": true,
  "section": "Insured Information",
  "order": 15,
  "placeholder": "Enter year property was built",
  "validation": {
    "min": 1800,
    "max": 2025,
    "errorMessage": "Year must be between 1800 and 2025"
  }
}
```

### 4. Dropdown (`dropdown`)
Single selection from predefined options.

**Required Fields:**
- `text`: Question text
- `type`: "dropdown"
- `isRequired`: boolean
- `order`: number
- `options`: Array of string options

**Example:**
```json
{
  "text": "Property Type",
  "type": "dropdown",
  "isRequired": true,
  "section": "Insured Information",
  "order": 10,
  "options": [
    "Single Family Home",
    "Townhouse",
    "Condominium",
    "Duplex",
    "Mobile Home",
    "Other"
  ],
  "placeholder": "Select property type"
}
```

### 5. Date (`date`)
Date picker input.

**Required Fields:**
- `text`: Question text
- `type`: "date"
- `isRequired`: boolean
- `order`: number

**Date Range:**
- Default first date: January 1, 2020
- Default last date: Current date + 365 days

**Example:**
```json
{
  "text": "Inspection Date",
  "type": "date",
  "isRequired": true,
  "section": "Inspector Information",
  "order": 3,
  "validation": {
    "type": "date",
    "errorMessage": "Please select a valid inspection date"
  }
}
```

### 6. Multiple Choice (`multipleChoice`)
Radio button selection from predefined options.

**Required Fields:**
- `text`: Question text
- `type`: "multipleChoice"
- `isRequired`: boolean
- `order`: number
- `options`: Array of string options

**Example:**
```json
{
  "text": "Foundation Type",
  "type": "multipleChoice",
  "isRequired": true,
  "section": "Elevation & Structure",
  "order": 25,
  "options": [
    "Slab on Grade",
    "Crawl Space",
    "Full Basement",
    "Partial Basement",
    "Pier & Beam",
    "Unknown"
  ]
}
```

### 7. Yes/No (`yesNo`)
Simple yes/no radio button selection.

**Required Fields:**
- `text`: Question text
- `type`: "yesNo"
- `isRequired`: boolean
- `order`: number

**Note:** Options are automatically set to `["Yes", "No"]`

**Example:**
```json
{
  "text": "Is the property occupied?",
  "type": "yesNo",
  "isRequired": true,
  "section": "Insured Information",
  "order": 12
}
```

## Validation Rules

### Common Validation Types
- `email`: Email format validation
- `phone`: Phone number format validation
- `zipCode`: 5-digit zip code validation
- `date`: Date format validation

### Validation Properties
- `type`: Validation type (email, phone, zipCode, date)
- `pattern`: Custom regex pattern
- `minLength`: Minimum string length
- `maxLength`: Maximum string length
- `min`: Minimum numeric value
- `max`: Maximum numeric value
- `errorMessage`: Custom error message

### Validation Examples

**Email Validation:**
```json
{
  "validation": {
    "type": "email",
    "errorMessage": "Please enter a valid email address"
  }
}
```

**Phone Validation:**
```json
{
  "validation": {
    "type": "phone",
    "errorMessage": "Please enter a valid phone number"
  }
}
```

**Zip Code Validation:**
```json
{
  "validation": {
    "type": "zipCode",
    "errorMessage": "Please enter a valid 5-digit zip code"
  }
}
```

**Custom Pattern Validation:**
```json
{
  "validation": {
    "pattern": "^[A-Z]{2}[0-9]{4}$",
    "errorMessage": "Format should be: AB1234"
  }
}
```

## Question Logic (Conditional Display)

Questions can be shown/hidden based on other question values.

### Logic Properties
- `dependsOnQuestionId`: ID of the parent question
- `showOnValue`: Show when parent has this specific value
- `hideOnValue`: Hide when parent has this specific value
- `showOnValues`: Show when parent has any of these values
- `hideOnValues`: Hide when parent has any of these values

### Logic Examples

**Show question only if property type is "Single Family Home":**
```json
{
  "logic": {
    "dependsOnQuestionId": "property_type",
    "showOnValue": "Single Family Home"
  }
}
```

**Hide question if answer is "No":**
```json
{
  "logic": {
    "dependsOnQuestionId": "has_garage",
    "hideOnValue": "No"
  }
}
```

**Show for multiple values:**
```json
{
  "logic": {
    "dependsOnQuestionId": "foundation_type",
    "showOnValues": ["Crawl Space", "Full Basement", "Partial Basement"]
  }
}
```

## Predefined Sections

The system organizes questions into predefined sections. Use these exact section names:

1. **Inspector Information** - Inspector and inspection details
2. **Insured Information** - Property owner and basic information
3. **Location Information** - Property location and neighborhood details
4. **Elevation & Structure** - Building structure and foundation details
5. **Exterior Features** - External building features and conditions
6. **Electrical** - Electrical system inspection
7. **Plumbing** - Plumbing system inspection
8. **Roof** - Roof condition and materials
9. **Garage / Outbuilding** - Garage and outbuilding inspection
10. **Hazard** - Identified hazards and safety issues
11. **Possible Hazards** - Potential hazards and liability concerns
12. **General** - Additional notes and observations

## Field Naming Convention

When questions are submitted, the question text is converted to a database field key using this pattern:
- Convert to lowercase
- Remove special characters
- Replace spaces with underscores
- Remove multiple consecutive underscores
- Trim leading/trailing underscores

**Examples:**
- "Inspector Name" → "inspector_name"
- "Year Built?" → "year_built"
- "Property Type & Style" → "property_type_style"

## Best Practices

1. **Order Numbers**: Use increments of 5 or 10 to allow for easy insertion of new questions
2. **Required Fields**: Mark essential questions as required, but don't overuse this
3. **Placeholder Text**: Provide helpful placeholder text for better UX
4. **Validation Messages**: Use clear, user-friendly error messages
5. **Section Organization**: Group related questions in appropriate sections
6. **Question Text**: Keep question text concise but clear
7. **Options**: For dropdowns and multiple choice, provide comprehensive but not overwhelming options

## Testing Your Questions

After creating questions in the admin panel, test them by:
1. Verifying they appear in the correct section
2. Testing validation rules
3. Checking conditional logic
4. Ensuring proper form submission
5. Validating data storage format

---

*Last Updated: July 2025*
*Version: 1.0*